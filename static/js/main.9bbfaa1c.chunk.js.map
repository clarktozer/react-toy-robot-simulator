{"version":3,"sources":["app/components/commandPalette/commandPalette.module.scss","app/app.module.scss","app/components/robotIcon/robotIcon.module.scss","app/enums/index.ts","app/constants/index.ts","app/selectors/index.ts","app/components/robotIcon/index.tsx","app/components/board/index.tsx","app/actions/index.ts","app/components/commandPalette/commands/move/index.tsx","app/components/commandPalette/commands/place/index.tsx","app/components/commandPalette/commands/report/index.tsx","app/components/commandPalette/commands/rotate/index.tsx","app/components/commandPalette/index.tsx","app/services/board.ts","app/reducers/robot.ts","app/reducers/index.ts","app/store/index.ts","app/index.tsx","serviceWorker.ts","index.tsx","app/components/board/board.module.scss"],"names":["module","exports","Facing","Rotation","TableDimensions","CalculateMove","NORTH","x","y","SOUTH","EAST","WEST","RotateLeft","North","West","South","East","RotateRight","selectors","robot","coordinates","facing","isPlaced","isMoveable","RobotIcon","className","styles","robotIcon","UpCircleFilled","classnames","toLowerCase","Board","useSelector","robotGrid","flexGrid","Array","from","keys","key","reverse","map","rowIndex","flexGridRow","colIndex","flexGridCol","flexGridTile","robotActions","place","createAction","move","rotate","Move","onMove","disabled","command","type","onClick","Option","Select","Place","onPlace","xMax","yMax","useState","setX","setY","setFacing","flexCenter","commandControl","value","min","max","defaultValue","onChange","Object","Report","onGenerate","Rotate","onRotate","Left","Right","CommandPalette","dispatch","useDispatch","currentFacing","commandPalette","rotation","notification","info","message","isValidCoordinates","initialState","enableES5","reducers","combineReducers","state","action","produce","draft","getType","payload","newX","newY","newFacing","store","createStore","applyMiddleware","App","config","placement","robotApp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9bbfaa1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commandPalette\":\"commandPalette_commandPalette__MPVvf\",\"command\":\"commandPalette_command__1xAwW\",\"commandControl\":\"commandPalette_commandControl__2fFz3\",\"flexCenter\":\"commandPalette_flexCenter__1S8br\",\"facing\":\"commandPalette_facing__cz_J8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"robotApp\":\"app_robotApp__3F1T7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"robotIcon\":\"robotIcon_robotIcon__2DoR0\"};","export enum Facing {\r\n    North = \"NORTH\",\r\n    South = \"SOUTH\",\r\n    East = \"EAST\",\r\n    West = \"WEST\"\r\n}\r\n\r\nexport enum Rotation {\r\n    Left,\r\n    Right\r\n}\r\n","import { Facing } from \"../enums\";\r\nimport { ICoordinate } from \"../models\";\r\n\r\nexport const TableDimensions: ICoordinate = {\r\n    x: 5,\r\n    y: 5\r\n};\r\n\r\nexport const CalculateMove: Record<Facing, ICoordinate> = {\r\n    NORTH: { x: 0, y: 1 },\r\n    SOUTH: { x: 0, y: -1 },\r\n    EAST: { x: 1, y: 0 },\r\n    WEST: { x: -1, y: 0 }\r\n};\r\n\r\nexport const RotateLeft: Record<Facing, Facing> = {\r\n    [Facing.North]: Facing.West,\r\n    [Facing.South]: Facing.East,\r\n    [Facing.East]: Facing.North,\r\n    [Facing.West]: Facing.South\r\n};\r\n\r\nexport const RotateRight: Record<Facing, Facing> = {\r\n    [Facing.North]: Facing.East,\r\n    [Facing.South]: Facing.West,\r\n    [Facing.East]: Facing.South,\r\n    [Facing.West]: Facing.North\r\n};\r\n","import { IApplicationState } from \"../reducers/models\";\r\n\r\nexport const selectors = {\r\n    getCoordinates: ({ robot }: IApplicationState) => robot.coordinates,\r\n    getFacing: ({ robot }: IApplicationState) => robot.facing,\r\n    getIsPlaced: ({ robot }: IApplicationState) => robot.isPlaced,\r\n    getIsMoveable: ({ robot }: IApplicationState) => robot.isMoveable\r\n};\r\n","import { UpCircleFilled } from \"@ant-design/icons\";\r\nimport classnames from \"classnames\";\r\nimport React from \"react\";\r\nimport { IRobotIcon } from \"./models\";\r\nimport styles from \"./robotIcon.module.scss\";\r\n\r\nexport const RobotIcon: React.FC<IRobotIcon> = ({ facing }) => (\r\n    <div className={styles.robotIcon}>\r\n        <UpCircleFilled\r\n            className={classnames({\r\n                [facing.toLowerCase()]: facing != null\r\n            })}\r\n        />\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { TableDimensions } from \"../../constants\";\r\nimport { selectors } from \"../../selectors\";\r\nimport { RobotIcon } from \"../robotIcon\";\r\nimport styles from \"./board.module.scss\";\r\n\r\nexport const Board: React.FC = () => {\r\n    const isPlaced = useSelector(selectors.getIsPlaced);\r\n    const coordinates = useSelector(selectors.getCoordinates);\r\n    const facing = useSelector(selectors.getFacing);\r\n\r\n    return (\r\n        <div className={styles.robotGrid}>\r\n            <div className={styles.flexGrid}>\r\n                {Array.from(Array(TableDimensions.x).keys(), key => key)\r\n                    .reverse()\r\n                    .map(rowIndex => (\r\n                        <div key={rowIndex} className={styles.flexGridRow}>\r\n                            {Array.from(Array(TableDimensions.y).keys(), key => key).map(colIndex => (\r\n                                <div key={colIndex} className={styles.flexGridCol}>\r\n                                    <div className={styles.flexGridTile}>\r\n                                        {isPlaced && rowIndex === coordinates.y && colIndex === coordinates.x ? (\r\n                                            <RobotIcon facing={facing} />\r\n                                        ) : null}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { createAction } from \"typesafe-actions\";\r\nimport { Rotation } from \"../enums\";\r\nimport { IPlaceRobot } from \"./models\";\r\n\r\nexport const robotActions = {\r\n    place: createAction(\"PLACE_ROBOT\")<IPlaceRobot>(),\r\n    move: createAction(\"MOVE_ROBOT\")(),\r\n    rotate: createAction(\"ROTATE_ROBOT\")<Rotation>()\r\n};\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport styles from \"../../commandPalette.module.scss\";\r\nimport { IMove } from \"./models\";\r\n\r\nexport const Move: React.FC<IMove> = ({ onMove, disabled }) => (\r\n    <div className={styles.command}>\r\n        <h4>Move</h4>\r\n        <Button type=\"primary\" disabled={disabled} onClick={onMove}>\r\n            Forward\r\n        </Button>\r\n    </div>\r\n);\r\n","import { Button, InputNumber, Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Facing } from \"../../../../enums\";\r\nimport styles from \"../../commandPalette.module.scss\";\r\nimport { IPlace } from \"./models\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const Place: React.FC<IPlace> = ({ disabled, onPlace, xMax, yMax }) => {\r\n    const [x, setX] = useState(0);\r\n    const [y, setY] = useState(0);\r\n    const [facing, setFacing] = useState(Facing.North);\r\n\r\n    const onFacingChange = (value: Facing) => setFacing(value);\r\n\r\n    const onXChange = (value: number | undefined) => setX(value ? value : 0);\r\n\r\n    const onYChange = (value: number | undefined) => setY(value ? value : 0);\r\n\r\n    const onPlaceRobot = () => onPlace({ x, y }, facing);\r\n\r\n    return (\r\n        <div className={styles.command}>\r\n            <h4>Place</h4>\r\n            <div className={styles.flexCenter}>\r\n                <Button className={styles.commandControl} type=\"primary\" onClick={onPlaceRobot} disabled={disabled}>\r\n                    Place\r\n                </Button>\r\n                <div className={styles.commandControl}>\r\n                    <label>X:</label>\r\n                    <InputNumber value={x} min={0} max={xMax} defaultValue={0} onChange={onXChange} type=\"number\" />\r\n                </div>\r\n                <div className={styles.commandControl}>\r\n                    <label>Y:</label>\r\n                    <InputNumber value={y} min={0} max={yMax} defaultValue={0} onChange={onYChange} type=\"number\" />\r\n                </div>\r\n                <div className={styles.commandControl}>\r\n                    <label>Facing:</label>\r\n                    <Select className={styles.facing} value={facing} defaultValue={Facing.North} onChange={onFacingChange}>\r\n                        {Object.keys(Facing).map(key => (\r\n                            <Option key={key} value={Facing[key as keyof typeof Facing]}>\r\n                                {key}\r\n                            </Option>\r\n                        ))}\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport styles from \"../../commandPalette.module.scss\";\r\nimport { IReport } from \"./models\";\r\n\r\nexport const Report: React.FC<IReport> = ({ disabled, onGenerate }) => (\r\n    <div className={styles.command}>\r\n        <h4>Report</h4>\r\n        <Button type=\"primary\" disabled={disabled} onClick={onGenerate}>\r\n            Generate\r\n        </Button>\r\n    </div>\r\n);\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { Rotation } from \"../../../../enums\";\r\nimport styles from \"../../commandPalette.module.scss\";\r\nimport { IRotate } from \"./models\";\r\n\r\nexport const Rotate: React.FC<IRotate> = ({ onRotate, disabled }) => {\r\n    const onRotateLeft = () => onRotate(Rotation.Left);\r\n\r\n    const onRotateRight = () => onRotate(Rotation.Right);\r\n\r\n    return (\r\n        <div className={styles.command}>\r\n            <h4>Rotate</h4>\r\n            <div className={styles.flexCenter}>\r\n                <Button className={styles.commandControl} disabled={disabled} type=\"primary\" onClick={onRotateLeft}>\r\n                    Left\r\n                </Button>\r\n                <Button className={styles.commandControl} disabled={disabled} type=\"primary\" onClick={onRotateRight}>\r\n                    Right\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { notification } from \"antd\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { robotActions } from \"../../actions\";\r\nimport { TableDimensions } from \"../../constants\";\r\nimport { Facing, Rotation } from \"../../enums\";\r\nimport { ICoordinate } from \"../../models\";\r\nimport { selectors } from \"../../selectors\";\r\nimport styles from \"./commandPalette.module.scss\";\r\nimport { Move } from \"./commands/move\";\r\nimport { Place } from \"./commands/place\";\r\nimport { Report } from \"./commands/report\";\r\nimport { Rotate } from \"./commands/rotate\";\r\n\r\nexport const CommandPalette: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const isPlaced = useSelector(selectors.getIsPlaced);\r\n    const isMoveable = useSelector(selectors.getIsMoveable);\r\n    const coordinates = useSelector(selectors.getCoordinates);\r\n    const currentFacing = useSelector(selectors.getFacing);\r\n\r\n    const onMove = () => dispatch(robotActions.move());\r\n\r\n    const onRotate = (rotation: Rotation) => dispatch(robotActions.rotate(rotation));\r\n\r\n    const onGenerate = () => {\r\n        notification.info({\r\n            message: `X: ${coordinates.x}, Y: ${coordinates.y}, Facing: ${currentFacing}`\r\n        });\r\n    };\r\n\r\n    const onPlace = (coordinates: ICoordinate, facing: Facing) =>\r\n        dispatch(\r\n            robotActions.place({\r\n                coordinates,\r\n                facing\r\n            })\r\n        );\r\n\r\n    return (\r\n        <div className={styles.commandPalette}>\r\n            <Place onPlace={onPlace} xMax={TableDimensions.x - 1} yMax={TableDimensions.y - 1} />\r\n            <Rotate disabled={!isPlaced} onRotate={onRotate} />\r\n            <Move disabled={!isPlaced || !isMoveable} onMove={onMove} />\r\n            <Report disabled={!isPlaced} onGenerate={onGenerate} />\r\n        </div>\r\n    );\r\n};\r\n","import { TableDimensions } from \"../constants\";\r\n\r\nexport class Board {\r\n    public static isValidCoordinates = (x: number, y: number) => x > -1 && x < TableDimensions.x && y > -1 && y < TableDimensions.y;\r\n}\r\n","import { produce } from \"immer\";\r\nimport { getType } from \"typesafe-actions\";\r\nimport { robotActions } from \"../actions\";\r\nimport { RobotAction } from \"../actions/models\";\r\nimport { CalculateMove, RotateLeft, RotateRight } from \"../constants\";\r\nimport { Facing, Rotation } from \"../enums\";\r\nimport { Board } from \"../services/board\";\r\nimport { IRobotState } from \"./models\";\r\n\r\nconst initialState: IRobotState = {\r\n    facing: Facing.North,\r\n    coordinates: {\r\n        x: 0,\r\n        y: 0\r\n    },\r\n    isPlaced: false,\r\n    isMoveable: false\r\n};\r\n\r\nexport const robotReducer = (state: IRobotState = initialState, action: RobotAction) =>\r\n    produce(state, draft => {\r\n        switch (action.type) {\r\n            case getType(robotActions.place): {\r\n                const { coordinates, facing } = action.payload;\r\n                if (Board.isValidCoordinates(coordinates.x, coordinates.y)) {\r\n                    const { x, y } = CalculateMove[facing];\r\n                    draft.coordinates = coordinates;\r\n                    draft.facing = facing;\r\n                    draft.isMoveable = Board.isValidCoordinates(coordinates.x + x, coordinates.y + y);\r\n                    draft.isPlaced = true;\r\n                }\r\n                break;\r\n            }\r\n            case getType(robotActions.move): {\r\n                if (draft.isPlaced && draft.isMoveable) {\r\n                    const { x, y } = CalculateMove[draft.facing];\r\n                    const newX = draft.coordinates.x + x;\r\n                    const newY = draft.coordinates.y + y;\r\n                    draft.coordinates.x = newX;\r\n                    draft.coordinates.y = newY;\r\n                    draft.isMoveable = Board.isValidCoordinates(newX + x, newY + y);\r\n                }\r\n                break;\r\n            }\r\n            case getType(robotActions.rotate): {\r\n                if (draft.isPlaced) {\r\n                    const newFacing = action.payload === Rotation.Left ? RotateLeft[draft.facing] : RotateRight[draft.facing];\r\n                    draft.facing = newFacing;\r\n                    const { x, y } = CalculateMove[newFacing];\r\n                    draft.isMoveable = Board.isValidCoordinates(draft.coordinates.x + x, draft.coordinates.y + y);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    });\r\n","import { combineReducers } from \"redux\";\r\nimport { IApplicationState } from \"./models\";\r\nimport { robotReducer } from \"./robot\";\r\nimport { enableES5 } from \"immer\";\r\n\r\nenableES5();\r\n\r\nexport const reducers = combineReducers<IApplicationState>({ robot: robotReducer });\r\n","import { applyMiddleware, createStore, Middleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nconst getMiddlewares = () => {\r\n    const middlewares: Middleware[] = [];\r\n\r\n    if (process.env.NODE_ENV === \"development\") {\r\n        middlewares.push(logger);\r\n    }\r\n\r\n    return middlewares;\r\n};\r\n\r\nexport const store = createStore(reducers, applyMiddleware(...getMiddlewares()));\r\n","import { notification } from \"antd\";\r\nimport React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport styles from \"./app.module.scss\";\r\nimport { Board } from \"./components/board\";\r\nimport { CommandPalette } from \"./components/commandPalette\";\r\nimport { store } from \"./store\";\r\n\r\nexport const App: React.FC = () => {\r\n    notification.config({\r\n        placement: \"topLeft\"\r\n    });\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <div className={styles.robotApp}>\r\n                <Board />\r\n                <CommandPalette />\r\n            </div>\r\n        </Provider>\r\n    );\r\n};\r\n","const isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import \"react-app-polyfill/ie11\";\r\nimport \"react-app-polyfill/stable\";\r\nimport \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./app\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"robotGrid\":\"board_robotGrid__Uh9Wn\",\"flexGrid\":\"board_flexGrid__2-2uj\",\"flexGridRow\":\"board_flexGridRow__eEb7z\",\"flexGridCol\":\"board_flexGridCol__2TkO2\",\"flexGridTile\":\"board_flexGridTile__3qzjB\"};"],"sourceRoot":""}